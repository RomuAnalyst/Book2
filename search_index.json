[["index.html", "Résumé des cours et TP - DU Dataviz Préface Contributeurs Utilisation des icônes", " Résumé des cours et TP - DU Dataviz Romuald ZAMI et contributeurs 2022-06-14 Préface Je me suis aussi inspiré de ce qui est déja produit. Reprendre un travail déja effectué n’est pas une mauvaise chose, il faut s’en inspirer et le faire évoluer en y apportant toutes les modifications necessaire afin que le rendu soit comme on le souhaite. Contributeurs Vous trouverez ci dessous l’ensemble des personnnes ayant contribués à la création de ce document : Auteur principal Romuald ZAMI, Chargé d’étude statistique au sein de la direction du pilotage, de la performance et l’organisation du travail à la direction générale de pôle Emploi. En parallèle , étudiant en DU Dataviz à l’IUT de Paris - Rives de Seine. Vous pouvez me suivre sur Twitter. Co-Auteurs Jonathan El Methni (Maître de Conférence à l’Université Paris Descartes) responsable du DU DATAVIZ 2021-22. Département Statistique et Info Décisionnelle (STID)Paris, France. Contributeurs additionnels Citer tous les professeurs du DU… Ainsi que mes deux collègues Yohan et Nicolas . Utilisation des icônes A partir de votre navigateur, vous pourrez utiliser les icones suivantes: Menu Search Font to adjust text size and display View source code on GitHub Download PDF Shortcuts (arrow keys to navigate; s to toggle sidebar; f to toggle search) Social Media Share "],["intro.html", "Chapitre 1 Objectif de la formation", " Chapitre 1 Objectif de la formation Version provisoire et temporaire de la formation Insee ‘Travail collaboratif avec R’ Ce cours consiste en une introduction/initiation à l’usage du logiciel R. Dans ce document sont présentés les concepts principaux du logiciel R (éléments de langage, données manipulées, manipulation de données, …). Ce document vise à présenter avec Rstudio la manipulation sde données, le traitement et l’analyse, en passant par l’étape graphique. "],["présentation-de-r-et-de-son-environnement.html", "Chapitre 2 Présentation de R et de son environnement 2.1 Qu’est-ce que ? 2.2 Prise en main de R-studio 2.3 L’aide en ligne 2.4 Packages", " Chapitre 2 Présentation de R et de son environnement 2.1 Qu’est-ce que ? Le logiciel R est un langage dédié à la statistique. Il a été développé à partir des années 90 à l’University of Auckland, Nouvelle-Zélande. Son implémentation principale est en open source (gratuit et modifiable) R : cran.r-project.org. R est un langage interprété (comme Python) et non compilé, c’est-à-dire que les commandes tapées au clavier sont directement exécutées sans qu’il soit besoin de construire un programme complet. On dit également qu’il est “exécuté à la volée”. Par exemple on peut à partir d’une ligne de commande écrire : print(&#39;Hello world!&#39;) ## [1] &quot;Hello world!&quot; Pour simplifier son utilisation, il est possible d’écrire des scripts c’est à dire une suite de commandes qui se trouvent dans un fichier dont l’extension est .R mais on pourrait tout aussi bien les écrire dans un .txt. Pour simplifier l’utilisation de R, il est nécessaire d’avoir une interface graphique (appelée aussi GUI pour Graphic User Interfaces). Celle offerte par R est très simpliste et beaucoup préfèrent utiliser RStudio (www.rstudio.com) à juste titre. Cet outil permet de réellement fluidifier le travail avec ce langage. 2.2 Prise en main de R-studio La fenêtre de RStudio se divise généralement en quatre sous-fenêtres: en partant de haut à gauche et en les parcourant dans le sens horaire on trouve : un éditeur de texte pour les scripts l’espace de travail ou d’historique de commandes le navigateur de fichiers, graphiques, packages, documentations la console R, c’est à dire la ligne de commande ainsi que les résultats des exécutions du code. Typiquement on tape le code dans l’éditeur et on l’exécute ensuite dans la console. Pour cela on place le curseur dans la ligne qu’on veut exécuter et on envoie la commande à la console à l’aide de la combinaison cmd Retour dans IOS et ctrl Retour sous Windows ou tout simplement à l’aide de la commande Run. 2.3 L’aide en ligne R dispose d’une documentation très complète et l’aide en ligne peut être très utile pour l’utilisation de fonctions, librairies et jeux de données. On peut accéder directement à l’aide en tapant ? suivi par la fonction (ou autre instruction, jeu de données,…) sur laquelle on souhaite se renseigner : ?mean affichera par exemple la page d’aide pour la fonction mean(). La commande help(mean) aura le même effet. On peut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated). Le but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code! 2.4 Packages Les deux grands avantages de R est d’être gratuit et open source. De ce fait il jouit d’une communauté d’utilisateurs très active dans le monde scientifique (statistiques, science des données, bioinformatique, sciences sociales,…). Il est de plus très utilisé par la communauté scientifique et de plus en plus dans les entreprises. Toute nouvelle méthode statistique a très rapidement une implémentation dans ce langage, ce qui n’est pas toujours le cas pour d’autres langages. Cela enrichi considérablement le logiciel et se fait à l’aide de ce qu’on appelle des paquets (ou packages ou library) Ces derniers sont développés par les utilisateurs et les développeurs. On peut les installer pour augmenter les capacités et possibilités du logiciel dans des domaines très variés de la statistique mais pas seulement en statistique. Il en existe un très grand nombre sur le site du CRAN : cran.r-project.org. Pour installer un package: install.packages(&quot;dplyr&quot;) # On telecharge et installe le package dplyr utilisé dans la manipulation de données Une fois un package installé, il faudra le charger en mémoire à chaque fois qu’une nouvelle session est ouverte: library(dplyr) # sans guillemets! require(dplyr) # fonction équivalente Important : il est à noter que # sert à commenter les instructions. "],["ggplo2.html", "Chapitre 3 Utiliser GGplot2 pour faire et superposer des graphiques", " Chapitre 3 Utiliser GGplot2 pour faire et superposer des graphiques .red { color: red; } Le but de la visualisation de données étant de représenter graphiquement des données brutes (ou quasi-brutes), il est souvent nécessaire de prendre en compte plusieurs variables. Nous devons donc aller plus loin que les graphiques de base (nuage de points, droite de regression, boite à moustache, diagramme en barres ou circulaires, …), pour les combiner par exemple. Avec le langage de base (package graphics notamment), il est possible de faire des graphiques évolués, mais avec beaucoup de paramétrages à la main. Pour cela on va commencer par s’intéresser au jeu de données mtcars. head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 # ?mtcars ou help(mtcars) str(mtcars) ## &#39;data.frame&#39;: 32 obs. of 11 variables: ## $ mpg : num 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... ## $ cyl : num 6 6 4 6 8 6 8 4 4 6 ... ## $ disp: num 160 160 108 258 360 ... ## $ hp : num 110 110 93 110 175 105 245 62 95 123 ... ## $ drat: num 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... ## $ wt : num 2.62 2.88 2.32 3.21 3.44 ... ## $ qsec: num 16.5 17 18.6 19.4 17 ... ## $ vs : num 0 0 1 1 0 1 0 1 1 1 ... ## $ am : num 1 1 1 0 0 0 0 0 0 0 ... ## $ gear: num 4 4 4 3 3 3 3 4 4 4 ... ## $ carb: num 4 4 1 1 2 1 4 2 2 4 ... plot(mtcars$hp,mtcars$mpg) Essayons d’améliorer ce graphique… Ci dessous, un exemple de graphique avancé, représentant 4 variables (trois quantitatives et une qualitative), ainsi qu’une explication succincte des différentes fonctions utilisées, et quelques paramètres de celles-ci. par(family = &quot;serif&quot;, mar = c(5, 4, 2, 0)+.1) couleurs_am = brewer.pal(3, &quot;Dark2&quot;) plot(mpg ~ hp, data = mtcars, pch = 19, cex = wt/3, col = couleurs_am[mtcars$am+1], main = &quot;Consommation en fonction de la Puissance&quot;, sub = &quot;Source : 1974 Motor Trend US magazine&quot;, font.sub = 3, cex.sub = .8, xlab = &quot;Puissance (en ch)&quot;, ylab = &quot;Consommation en Miles/Galon&quot;, bty = &quot;n&quot;, axes = FALSE) axis(1, lwd = 0, lwd.ticks = .5) at.y = axis(2, lwd = 0, lwd.ticks = .5, labels = FALSE) text(y = at.y, x = 35, labels = at.y, srt = 0, pos = 2, xpd = TRUE) l1 = legend(&quot;topright&quot;, legend = c(&quot;Automatique&quot;, &quot;Manuelle&quot;), col = couleurs_am, bty = &quot;n&quot;, cex = .8, pch = 19, text.width = 50, text.col = couleurs_am, title = &quot;Boite de vitesse&quot;, title.col = &quot;black&quot;) legend(l1$rect$left, l1$rect$top-l1$rect$h-1, legend = range(mtcars$wt), title = &quot;Poids (1000 lbs)&quot;, pch = 19, pt.cex = range(mtcars$wt)/3, bty = &quot;n&quot;, cex = .8, col = gray(.5), text.width = 50, adj = -.25) outliers_hp = subset(mtcars, subset = hp &gt; 250) text(outliers_hp$hp, outliers_hp$mpg, row.names(outliers_hp), pos = c(3, 2), cex = .8, font = 4) outliers_mpg = subset(mtcars, subset = mpg &gt; 30) text(outliers_mpg$hp, outliers_mpg$mpg, row.names(outliers_mpg), pos = 4, cex = .8, font = 4) La fonction par() permet de modifier les paramètres graphiques, tel que : mar pour les marges (un vecteur numérique de taille 4 qui permet de définir les tailles des marges dans l’ordre suivant : bas, gauche, haut, droite. Par défaut il vaut c(5.1, 4.1, 4.1, 2.1) ) family pour la famille de police d’écriture certains paramètres ci-après sont définissables globalement dans la fonction par(), ou localement dans les fonctions suivantes Les paramètres de la fonction plot() pch : symbole utilisé pour chaque point (ici 19 indique un rond plein) cex : taille du point (ici en fonction de la variable wt) col : couleur des points (ici en fonction de la variable am) main, sub, xlab, ylab : resp. titre, sous-titre, intitulé en abscisse et intitulé en ordonnée *.sub : indication spécifique pour le sous-titre bty : type de la boite (ici n veut dire rien autour du graphique) axes : présence ou non des axes (non ici) La fonction axis() qui permet d’ajouter un axe (1 : en abscisse, et 2 : en ordonnée) si rien d’indiqué pour at, utilisation des ticks par défaut lwd : largeur de la ligne (ici non-présente) lwd.ticks : largeur des ticks (assez fine ici) renvoie les valeurs des ticks La fonction text() permet d’écrire du texte sur le graphique le x = 35 est choisi par expérience srt : angle du texte pos : ajustement du texte par rapport aux coordonnées indiquées xpd : permet d’écrire en dehors du graphique (dans les marges donc) La fonction legend() permet d’ajouter une légende position : soit \\((x,y)\\), soit chaine spécifique legend : texte des items col, bty, cex, pch : identique à précédemment text.width et text.col : largeur du texte des items et couleur(s) title et title.col : titre de la légende (et couleur du titre) renvoie une liste avec deux objets (rect qui contient des infos sur le rectangle occupé par la légende dans le graphique et text qui contient les coordonnées du texte des items) pt.cex : taille des symboles adj: ajustement du texte L’utilisateur souhaite réaliser des graphiques (nuages de points, histogrammes, densité…) et les personnaliser (légendes, titres, échelles…). ::: {.recommandation data-latex=““} Il est recommandé d’utiliser le package ggplot2 qui permet de réaliser et de personnaliser un grand nombre de représentations graphiques; Il est conseillé aux utilisateurs débutants d’utiliser l’add-in esquisse pour se familiariser avec ggplot2. Vous pouvez également accéder à esquisse en exécutant le code suivant: library(esquisse) esquisser() L’objectif du package ggplot2 est de fournir une approche unique pour produire quasiment toute représentation graphique de données. Ce package propose un grand nombre de fonctions permettant de personnaliser finement les représentations graphiques. Cette fiche n’est donc qu’une introduction succincte à ggplot2. Pour des formations plus détaillées, se référer à {#ggplot2Ressources}. 3.0.1 Introduction La fonction essentielle de ggplot2 est ggplot(). Il faut définir quatre éléments pour construire un graphique avec ggplot(): la table de données ; le mapping : on définit dans l’aesthetic (ou aes) le lien entre les variables des données et ce que l’on veut représenter sur le graphique (quelle variable sur l’axe x, sur l’axe y, quelle variable pour définir une graduation de couleurs…) ; la forme géométrique ou geometry : on définit la représentation graphique qu’on souhaite utiliser. Les géométries ont toutes un nom qui commence par geom_; par exemple, il faut utiliser la géométrie geom_point() pour réaliser un nuage de points; les paramètres : on définit les autres paramètres qui dépendent de constantes (par exemple : je veux que toutes mes lignes soient rouges ou de taille 2 pixels). La construction d’un graphique repose sur le principe de couches successives. Les différentes couches graphiques se superposent et s’enchaînent grâce à l’opérateur +, comme un pipe. Il est possible d’aller à la ligne dans une instruction ggplot(), il suffit que l’opérateur + figure à la fin de la ligne. Voici un exemple de code qui crée un nuage de points (géométrie geom_point()) à partir des données mes_donnees, avec les variables variable1 en abscisse et variable2 en ordonnée: Se mettre d’accord sur la trame qui sera le squelette du rapport library(ggplot2) ggplot(data = iris) + geom_point(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width)) ## Warning: Use of `iris$Sepal.Length` is discouraged. Use `Sepal.Length` instead. ## Warning: Use of `iris$Sepal.Width` is discouraged. Use `Sepal.Width` instead. library(ggplot2) ggplot(data = iris) + geom_point(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width)) 3.0.2 Le mapping et l’utilisation d’aes() Le mapping désigne dans ggplot2 la relation entre un attribut graphique de la geometry (abscisse, ordonnée, couleur…) et une variable présente dans la table de données. On déclare le mapping grâce à la fonction aes() (pour aesthetic), qui sert donc à identifier les variables que l’on souhaite représenter sur le graphique. Les arguments fondamentaux de aes() sont les variables représentées sur l’axe des abscisses et l’axe des ordonnées (x et y). Par exemple, on écrit aes(x = niveau_vie_median, y = taux_chomage) si l’on souhaite représenter pour chaque iris le taux de chômage (sur l’axe y) en fonction du niveau de vie médian (sur l’axe x). Par ailleurs, la fonction aes() admet d’autres arguments qui permettent de modifier l’apparence des attributs graphiques selon une troisième variable du jeu de données. Voici les arguments supplémentaires les plus courants: Attribut Description color Couleur des lignes ou des points shape Forme des points size Taille des points alpha Transparence des points fill Couleur des surfaces linetype Type de ligne (continue, pointillée, …) Dans l’exemple qui suit, on représente pour chaque iris le taux de chômage (sur l’axe y) en fonction du niveau de vie médian (sur l’axe x), en colorant les points en fonction de la part des cadres et professions intellectuelles supérieures parmi les actifs de l’iris (color = part_cadres). Il est également possible d’utiliser ces mêmes arguments pour modifier un attribut graphique sans le lier à une variable. En ce cas, on définit l’attribut à l’extérieur de l’aesthetic (donc à l’extérieur de aes()). Voici l’exemple précédent, modifié pour que tous les points soient (rouge), et non en fonction d’une variable. L’argument color est donc à l’extérieur de aes(). La notion de mapping et la définition des attributs graphiques à l’intérieur et à l’extérieur d’aes() sont une des principales difficultés de ggplot2. Il est normal de tâtonner lorsqu’on commence à les utiliser. Pour s’y retrouver, il suffit de suivre la règle suivante. Si on établit un lien entre les valeurs d’une variable et un attribut graphique, il s’agit d’un mapping qui doit être défini à l’intérieur de la fonction aes(). Dans le cas contraire, il s’agit d’un simple paramètre du graphique, qui doit être défini à l’extérieur de la fonction aes(). 3.0.3 Les formes géométriques La forme géométrique ou geometry désigne le type de représentation graphique utilisée (nuage de points, histogrammes…). On spécifie le type de représentation que l’on souhait en utilisant une fonction dont le nom commence par geom_. Le tableau ci-dessous présente quelques représentations graphiques classiques. geometry Description Arguments geom_point() Nuage de points x, y, shape, fill, size geom_line() Ligne x, y, linetype geom_bar() Diagramme en barres x, fill, linetype, weight geom_histogram() Histogramme x, fill, linetype, weight geom_boxplot() Boîte à moustaches x, y, fill, weight geom_density() Courbe de densité x, y, fill, color, linetype Voici deux exemples d’utilisation. Il existe un grand nombre de géométries dans ggplot2. Vous pouvez en afficher la liste en exécutant la commande help.search(\"^geom_\", package = \"ggplot2\"). Par ailleurs, de très nombreux packages proposent encore d’autres géométries pour réaliser des représentations graphiques particulières (cartes avec ggmap, arbres généalogiques avec ggtree et ggenealogy, résultats d’élections avec ggparliament…). "],["git.html", "Chapitre 4 Utiliser GIT avec ", " Chapitre 4 Utiliser GIT avec Cette formation ne nécessite pas de connaissances avancées en R, voire aucune car elle s’appuie uniquement sur les fonctionnalités de RStudio. En cours deconstruction… "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
